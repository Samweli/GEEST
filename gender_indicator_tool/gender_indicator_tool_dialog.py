# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GenderIndicatorToolDialog
                                 A QGIS plugin
 Gender Indicator Tool
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-07-15
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Pegasys
        email                : andre@pegasys.co.za
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'gender_indicator_tool_dialog_base.ui'))


class GenderIndicatorToolDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(GenderIndicatorToolDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Setting CRS
        CRS = [["Other", 0],
               ["Comoros", 32738],
               ["Dominican Republic", 32619],
               ["Papua New Guinea", 32755],
               ]
        CRScomboBox_list = [x[0] + " - EPSG: " + str(x[1]) for x in CRS]
        self.CRScomboBox.addItems(CRScomboBox_list)

        self.pbExecute.clicked.connect(self.execute)
        self.tbOutputFile.clicked.connect(self.saveFile)

        def saveFile(self):
            response = QFileDialog.getSaveFileName(
                parent=self,
                caption='Save file',
                directory=os.getcwd()
            )

            self.OutputFileLineEdit.setText(str(response[0]))

        def Rasterize(self):
            file = self.AmenitiesDayCareFile.filePath()

        def execute(self):
            # shp = gpd.read_file(???)
            # shp_wgs84 = shp.to_crs('EPSG:4326')
            UTM_crs = self.CRScomboBox.currentText().split(":")[1].strip()
            self.OutputFileLineEdit.setText(UTM_crs)
            # shp_utm = shp_wgs84.to_crs(f'EPSG:{UTM_crs}}')
            # utm_file = dayCare[:-4] + "_UTM.shp"
            # shp_utm.to_file(utm_file)